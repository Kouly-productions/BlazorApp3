@page "/Account/RegisterCpr"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp3.Data
@using BlazorApp3.Services

@inject NavigationManager NavigationManager
@inject ITempAuthStateService TempAuthStateService
@inject ILogger<RegisterCpr> Logger

@rendermode InteractiveServer

<PageTitle>Complete Registration</PageTitle>

<div class="container">
    <h1 class="mb-4">Complete Registration</h1>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Verifying your session...</p>
                        </div>
                    }
                    else if (validToken)
                    {
                        <h3 class="card-title text-center mb-4">Enter Your CPR Number</h3>
                        <p class="text-muted mb-4">Please enter your CPR number to complete the registration process.</p>

                        <EditForm Model="Input" method="post" OnValidSubmit="CompleteRegistration" FormName="registerCpr">
                            <DataAnnotationsValidator />

                            <div class="form-floating mb-4">
                                <InputText @bind-Value="Input.CprNumber" 
                                        id="Input.CprNumber" 
                                        class="form-control" 
                                        placeholder="1234567890" 
                                        aria-required="true" 
                                        maxlength="10" />
                                <label for="Input.CprNumber" class="form-label">CPR Number</label>
                                <ValidationMessage For="() => Input.CprNumber" class="text-danger" />
                                <small class="form-text text-muted">Enter your 10-digit personal identification number.</small>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg">Complete Registration</button>
                                <a href="/Account/Register" class="btn btn-outline-secondary">Cancel</a>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <div class="alert alert-warning" role="alert">
                                <h4 class="alert-heading">Invalid Session</h4>
                                <p>Your registration session is invalid or has expired.</p>
                                <hr>
                                <p class="mb-0">Please return to the registration page to start again.</p>
                            </div>
                            <a href="/Account/Register" class="btn btn-primary mt-3">Return to Registration</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isLoading = true;
    private bool validToken = false;
    private PendingRegistration? pendingRegistration;

    [SupplyParameterFromQuery]
    private string? token { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Short delay to reduce flickering for quick processes
        await Task.Delay(300);

        // Validate the token
        if (string.IsNullOrEmpty(token) || !TempAuthStateService.TryGetPendingRegistration(token, out pendingRegistration))
        {
            validToken = false;
            isLoading = false;
            return;
        }

        validToken = true;
        isLoading = false;
    }

    private async Task CompleteRegistration()
    {
        if (pendingRegistration == null)
        {
            errorMessage = "Invalid session. Please start registration again.";
            return;
        }

        try
        {
            // Validate CPR format
            if (!Input.CprNumber.All(char.IsDigit) || Input.CprNumber.Length != 10)
            {
                errorMessage = "CPR Number must be exactly 10 digits.";
                return;
            }

            // Redirect to the endpoint that will handle the actual registration
            NavigationManager.NavigateTo(
                $"/Account/CompleteRegistration?token={token}&cprNumber={Uri.EscapeDataString(Input.CprNumber)}",
                forceLoad: true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration completion");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "CPR number is required")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "CPR number must be exactly 10 digits")]
        [Display(Name = "CPR Number")]
        public string CprNumber { get; set; } = "";
    }
}
@page "/Account/VerifyCpr"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApp3.Data
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject TodoDbContext TodoDb
@inject IHashingService HashingService
@inject ITempAuthStateService TempAuthStateService
@inject ILogger<VerifyCpr> Logger

@rendermode InteractiveServer

<PageTitle>Verify CPR Number</PageTitle>

<div class="container">
    <h1 class="mb-4">Security Verification</h1>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                            <div class="alert alert-danger" role="alert">
                            @errorMessage
                            </div>
                    }

                    @if (isLoading)
                    {
                            <div class="text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Verifying your session...</p>
                            </div>
                    }
                    else if (validToken)
                    {
                            <h3 class="card-title text-center mb-4">Enter Your CPR Number</h3>
                            <p class="text-muted mb-4">Please enter your CPR number to complete the authentication process.</p>

                            <EditForm Model="Input" method="post" OnValidSubmit="VerifyCprNumber" FormName="verifyCpr">
                                <DataAnnotationsValidator />

                                <div class="form-floating mb-4">
                                    <InputText @bind-Value="Input.CprNumber" 
                                            id="Input.CprNumber" 
                                            class="form-control" 
                                            placeholder="1234567890" 
                                            aria-required="true" 
                                            maxlength="10" />
                                    <label for="Input.CprNumber" class="form-label">CPR Number</label>
                                    <ValidationMessage For="() => Input.CprNumber" class="text-danger" />
                                    <small class="form-text text-muted">Enter your 10-digit personal identification number.</small>
                                </div>

                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-primary btn-lg">Complete Login</button>
                                    <a href="/Account/Login" class="btn btn-outline-secondary">Cancel</a>
                                </div>
                            </EditForm>
                    }
                    else
                    {
                            <div class="text-center p-4">
                                <div class="alert alert-warning" role="alert">
                                    <h4 class="alert-heading">Invalid Session</h4>
                                    <p>Your verification session is invalid or has expired.</p>
                                    <hr>
                                    <p class="mb-0">Please return to the login page to start again.</p>
                                </div>
                                <a href="/Account/Login" class="btn btn-primary mt-3">Return to Login</a>
                            </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isLoading = true;
    private bool validToken = false;
    private PendingAuth? pendingAuth;
    private string? pendingNavigationTarget = null;

    [SupplyParameterFromQuery]
    private string? token { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Short delay to reduce flickering for quick processes
        await Task.Delay(300);

        // Validate the token
        if (string.IsNullOrEmpty(token) || !TempAuthStateService.TryGetPendingAuth(token, out pendingAuth))
        {
            validToken = false;
            isLoading = false;
            return;
        }

        validToken = true;
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Check if we have a pending navigation to perform
        if (pendingNavigationTarget != null)
        {
            string target = pendingNavigationTarget;
            pendingNavigationTarget = null; // Clear it to prevent multiple navigations

            // Delay slightly to allow the render to complete
            await Task.Delay(10);

            NavigationManager.NavigateTo(target, forceLoad: true);
        }
    }

    private async Task VerifyCprNumber()
    {
        if (pendingAuth == null)
        {
            errorMessage = "Invalid session. Please log in again.";
            return;
        }

        try
        {
            // Get the user from the stored ID
            var user = await UserManager.FindByIdAsync(pendingAuth.UserId);
            if (user == null)
            {
                errorMessage = "User not found. Please log in again.";
                return;
            }

            // Verify the CPR number
            var cprRecord = await TodoDb.CprRecords.FirstOrDefaultAsync(c => c.UserId == user.Id);
            if (cprRecord == null)
            {
                errorMessage = "CPR record not found. Please contact support.";
                return;
            }

            if (HashingService.VerifyHash(Input.CprNumber, cprRecord.CprNumber, "PBKDF2"))
            {
                // CPR is correct, prepare navigation
                string targetUri = pendingAuth.ReturnUrl ?? "/Todo";

                // Remove the temporary auth state
                TempAuthStateService.RemovePendingAuth(token);

                // Instead of signing in here, redirect to a dedicated endpoint that will handle sign-in
                NavigationManager.NavigateTo($"/Account/CompleteSignIn?userId={user.Id}&rememberMe={pendingAuth.RememberMe}&returnUrl={Uri.EscapeDataString(targetUri)}", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid CPR number. Please try again.";
                Logger.LogWarning("Failed CPR verification attempt for user {Email}.", user.Email);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during CPR verification");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "CPR number is required")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "CPR number must be exactly 10 digits")]
        [Display(Name = "CPR Number")]
        public string CprNumber { get; set; } = "";
    }
}
@page "/Account/VerifyCpr"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using BlazorApp3.Data
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Components.Account
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<VerifyCpr> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject TodoDbContext TodoDb
@inject ProtectedSessionStorage SessionStorage

<PageTitle>CPR Verification</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">CPR Verification</h3>
                </div>
                <div class="card-body">
                    <p>Please enter your CPR number to complete the login process.</p>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                            <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                            </div>
                    }

                    @if (IsProcessing)
                    {
                            <div class="alert alert-info" role="alert">
                                Processing your verification... Please wait.
                            </div>
                    }
                    else if (IsVerified)
                    {
                            <div class="alert alert-success" role="alert">
                                <p>CPR verification successful! Redirecting...</p>
                                <div class="spinner-border spinner-border-sm text-success" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                    }
                    else
                    {
                            <div class="form-floating mb-3">
                                <input @bind="CprNumber" @oninput="ValidateInput" id="cprNumber" class="form-control" maxlength="10" placeholder="1234567890" />
                                <label for="cprNumber">CPR Number:</label>
                            </div>

                            <button @onclick="VerifyCprNumber" class="btn btn-primary w-100" disabled="@IsProcessing">
                                Complete Login
                            </button>

                            <div class="mt-3 text-center">
                                <a href="Account/Login" class="text-decoration-none">
                                    <i class="bi bi-arrow-left"></i> Back to Login
                                </a>
                            </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    [SupplyParameterFromQuery]
    public bool RememberMe { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private string CprNumber { get; set; } = "";
    private string ErrorMessage { get; set; } = "";
    private bool IsProcessing { get; set; } = false;
    private bool IsVerified { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Validate we have all the required data
        if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(Token))
        {
            ErrorMessage = "Invalid request. Please try logging in again.";
            return;
        }

        // Get the user
        var user = await UserManager.FindByIdAsync(UserId);
        if (user == null)
        {
            ErrorMessage = "User not found. Please try logging in again.";
            return;
        }
    }

    private void ValidateInput(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? "";
        CprNumber = new string(input.Where(char.IsDigit).ToArray());
    }

    private async Task VerifyCprNumber()
    {
        // Prevent multiple clicks
        if (IsProcessing)
            return;

        IsProcessing = true;
        ErrorMessage = "";
        await InvokeAsync(StateHasChanged);

        try
        {
            if (string.IsNullOrEmpty(CprNumber) || CprNumber.Length != 10)
            {
                ErrorMessage = "CPR number must be exactly 10 digits.";
                IsProcessing = false;
                return;
            }

            // Get the user
            var user = await UserManager.FindByIdAsync(UserId);
            if (user == null)
            {
                ErrorMessage = "User not found. Please try logging in again.";
                IsProcessing = false;
                return;
            }

            Logger.LogInformation("Verifying CPR for user with ID: {UserId}, Email: {Email}",
                user.Id, user.Email);

            // Verify the CPR number
            var cprRecord = await TodoDb.CprRecords.FirstOrDefaultAsync(c => c.UserId == UserId);

            if (cprRecord == null)
            {
                // Log the first few CPR records for debugging
                var records = await TodoDb.CprRecords.Take(5).ToListAsync();
                Logger.LogWarning("No CPR record found for userId: {UserId}. Sample records: {Records}",
                                  UserId, string.Join(", ", records.Select(r => $"{{UserId: {r.UserId}, CPR: {r.CprNumber.Substring(0, 4)}...}}")));

                ErrorMessage = "No CPR record found for this account. Please register your CPR number first.";
                IsProcessing = false;
                return;
            }

            if (cprRecord.CprNumber != CprNumber)
            {
                ErrorMessage = "Invalid CPR number. Please try again.";
                IsProcessing = false;
                return;
            }

            Logger.LogInformation("CPR verified successfully. Signing in user.");

            // Key change: Sign in the user directly without redirecting to another page
            try
            {
                await SignInManager.SignInAsync(user, RememberMe);
                Logger.LogInformation("User {UserId} ({Email}) successfully signed in", user.Id, user.Email);

                // Mark as verified to show success message 
                IsVerified = true;
                IsProcessing = false;
                await InvokeAsync(StateHasChanged);

                // Short delay to show success message before redirecting
                await Task.Delay(1500);

                // Use IdentityRedirectManager which is designed to work with Identity
                RedirectManager.RedirectTo(ReturnUrl ?? "/");
            }
            catch (Exception signInEx)
            {
                Logger.LogError(signInEx, "Error during sign in: {Error}", signInEx.Message);
                ErrorMessage = "Login error: " + signInEx.Message;
                IsProcessing = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during CPR verification: {Error}", ex.Message);
            ErrorMessage = "Error: " + ex.Message;
            IsProcessing = false;
        }
    }
}